/* register server type for #if..#else..#endif structures with 'preproc' */
#parse "../config.h"
#parse "../common/defines-local.h"
#parse "../common/defines-features.h"

/* specific includes for spells.pre file */

/* ---------------- #include '../common/defines-spells.h' ---------------- */
/* $Id$ */
/* File: defines-spells.h */

/* Purpose: global constants and macro definitions for spells.pre lua file */

#define PR_MANA		0x00000080L	/* Display Mana */


/*
* Number of effects
*/
#define EFF_WAVE	0x00000001      /* A circle whose radius increase */
#define EFF_STORM	0x00000004      /* The area follows the player */


/* Generic temporary weapon branding, currently only used for melee weapons */
#define TBRAND_ELEC		0
#define TBRAND_COLD		1
#define TBRAND_FIRE		2
#define TBRAND_ACID		3
#define TBRAND_POIS		4
//unused/not fully implemented:
#define TBRAND_BASE		5
#define TBRAND_CHAO		6
#define TBRAND_VORP		7
#define TBRAND_BALL_FIRE	8
#define TBRAND_BALL_COLD	9
#define TBRAND_BALL_ELEC	10
#define TBRAND_BALL_ACID	11
#define TBRAND_BALL_SOUN	12


/*
* Shield effect options
*/
#define SHIELD_NONE		0x0000
#define SHIELD_COUNTER		0x0001
#define SHIELD_FIRE		0x0002


/*
* Spell types used by project(), and related functions.
*/
#define GF_ELEC			1
#define GF_POIS			2
#define GF_ACID			3
#define GF_COLD			4
#define GF_FIRE			5
#define GF_MISSILE		10
#define GF_ARROW		11
#define GF_PLASMA		12
#define GF_HOLY_ORB		13
#define GF_WATER		14
#define GF_LITE			15
#define GF_DARK			16
#define GF_LITE_WEAK		17
#define GF_DARK_WEAK		18
#define GF_SHARDS		20
#define GF_SOUND		21
#define GF_CONFUSION		22
#define GF_FORCE		23
#define GF_INERTIA		24
#define GF_MANA			26
#define GF_METEOR		27
#define GF_ICE			28
#define GF_CHAOS		30
#define GF_NETHER		31
#define GF_DISENCHANT		32
#define GF_NEXUS		33
#define GF_TIME			34
#define GF_GRAVITY		35
#define GF_KILL_WALL		40
#define GF_KILL_DOOR		41
#define GF_KILL_TRAP		42
#define GF_KILL_TRAP_DOOR	43
#define GF_MAKE_WALL		45
#define GF_MAKE_DOOR		46
#define GF_MAKE_TRAP		47
#define GF_OLD_CLONE		51
#define GF_OLD_POLY		52
#define GF_OLD_HEAL		53
#define GF_OLD_SPEED		54
#define GF_OLD_SLOW		55
#define GF_OLD_CONF		56
#define GF_OLD_SLEEP		57
#define GF_OLD_DRAIN		58
#define GF_AWAY_UNDEAD		61
#define GF_AWAY_EVIL		62
#define GF_AWAY_ALL		63
#define GF_TURN_UNDEAD		64
#define GF_TURN_EVIL		65
#define GF_TURN_ALL		66
#define GF_DISP_UNDEAD		67
#define GF_DISP_EVIL		68
#define GF_DISP_ALL		69

#define	GF_HEAL_PLAYER		70
#define	GF_STONE_WALL		71
#define	GF_EARTHQUAKE		72
#define	GF_WRAITH_PLAYER	73
#define	GF_SPEED_PLAYER		74
#define	GF_SHIELD_PLAYER	75
#define GF_RECALL_PLAYER	76
#define GF_STUN			77
#define GF_IDENTIFY		78
#define GF_PSI			79
#define GF_HOLY_FIRE		80
#define GF_DISINTEGRATE		81
#define GF_HELL_FIRE		82 /* was HOLY_ORB */
#define GF_NETHER_WEAK		83 /* special version of GF_NETHER, solely for Vampires smashing Potions of Death */
#define GF_REMCURSE_PLAYER	84
#define GF_KILL_GLYPH		85
#define GF_STARLITE		86
#define GF_TERROR		87
#define GF_HAVOC		88
#define GF_INFERNO		89 /* damage-wise like GF_ROCKET, but no special sfx and doesn't hurt terrain (could be changed, dunno) */
#define GF_DETONATION		90 /* damage-wise like GF_ROCKET, but different sfx */
#define GF_ROCKET		91

/* for traps.h :) - C. Blue */
#define GF_REMFEAR		92
#define GF_HERO_MONSTER		93
#define GF_LIFEHEAL		94
#define GF_DEC_STR		95
#define GF_DEC_DEX		96
#define GF_DEC_CON		97
#define GF_RES_STR		98
#define GF_RES_DEX		99
#define GF_RES_CON		100
#define GF_INC_STR		101
#define GF_INC_DEX		102
#define GF_INC_CON		103
#define GF_AUGMENTATION		104
#define GF_RUINATION		105
#define GF_EXP			106

#define GF_NUKE			110
#define GF_BLIND		111
#define GF_HOLD			112	/* hold */
#define GF_DOMINATE		113	/* dominate */
#define GF_BLESS_PLAYER		114
#define GF_REMFEAR_PLAYER	115
#define GF_SATHUNGER_PLAYER	116
#define GF_RESFIRE_PLAYER	117
#define GF_RESCOLD_PLAYER	118
#define GF_CUREPOISON_PLAYER	119
#define GF_SEEINVIS_PLAYER	120
#define GF_SEEMAP_PLAYER	121
#define GF_CURECUT_PLAYER	122
#define GF_CURESTUN_PLAYER	123
#define GF_DETECTCREATURE_PLAYER	124
#define GF_DETECTDOOR_PLAYER	125
#define GF_DETECTTRAP_PLAYER	126
#define GF_TELEPORTLVL_PLAYER	127
#define GF_RESPOIS_PLAYER	128
#define GF_RESELEC_PLAYER	129
#define GF_RESACID_PLAYER	130
#define GF_HPINCREASE_PLAYER	131
#define GF_HERO_PLAYER		132
#define GF_SHERO_PLAYER		133

#define GF_UNBREATH		134
#define GF_WAVE			135

#define GF_TELEPORT_PLAYER	136	/* UNUSED actually: only s_convey used it once */

#define GF_RESTORE_PLAYER	137	/* C. Blue changes */
#define GF_VAPOUR		138	/* This is same as GF_WATER, just looks differently */
#define GF_CURE_PLAYER		139
#define GF_RESURRECT_PLAYER	140
#define GF_SANITY_PLAYER	141
#define GF_ZEAL_PLAYER		142
#define GF_DISP_DEMON		143
#define GF_SOULCURE_PLAYER	144
#define GF_MINDBOOST_PLAYER	145
#define GF_REMCONF_PLAYER	146
#define GF_REMIMAGE_PLAYER	147
#define GF_SLOWPOISON_PLAYER	148
#define GF_CURING		149

/* Zangband changes */
#define GF_TELE_TO		150
#define GF_HAND_DOOM		151
#define GF_STASIS		152

/* For the new priest spell I'm conjuring - the_sandman */
#define GF_CURSE		153
/* Here comes the druid items - the_sandman */
#define GF_HEALINGCLOUD		154
#define GF_WATERPOISON		155
#define GF_ICEPOISON		156
#define GF_EXTRA_STATS		157
#define GF_EXTRA_SPR		158

#define GF_PUSH			159 /* Moltor */
#define GF_SILENCE		160 /* for new mindcrafters */
#define GF_CHARMIGNORE		161
#define GF_STOP			162 /* special fx: scroll of rune of protection in a monster trap - C. Blue */
#define GF_CAUSE		163 /* 'Curse' actually, the monster spell */

#define GF_THUNDER		189 /* To replace the hacky 'triple-bolt' of the thunderstorm spell */
#define GF_ANNIHILATION		192 /* To differentiate drain effect from hacky non-drain effect for wands */

/* For snowflakes on WINTER_SEASON. Could use 0 for type, but let's complete it. -C. Blue */
#define GF_SNOWFLAKE		200
/* For fireworks on NEW_YEARS_EVE - C. Blue */
#define GF_FW_FIRE		201
#define GF_FW_ELEC		202
#define GF_FW_POIS		203
#define GF_FW_LITE		204
#define GF_FW_SHDI		205
#define GF_FW_SHDM		206
#define GF_FW_MULT		207
/* well, let's try to bring weather and seasons? */
#define GF_RAINDROP		208
#define GF_LEAF			209 /* unused, just added here for inspiration - C. Blue */
/* full-screen warnings or other important notifications that players oughtn't overlook - C. Blue */
//ugly though, since they are wpos-bound -..
// #define GF_TEXT_UPDATE	210 /* 'your game version is outdated..' */
#define GF_SHOW_LIGHTNING	211
#define GF_THUNDER_VISUAL	212

#define GF_CROSSHAIR		250 /* what's this for? appearently unused; moved it to 250 */


#if 0	/* Let's implement one by one.. */
#define GF_DISP_DEMON		70      /* New types for Zangband begin here... */
#define GF_DISP_LIVING		71
#define GF_NUKE			73
#define GF_STASIS		75
#define GF_STONE_WALL		76
#define GF_DEATH_RAY		77
#define GF_STUN			78
#define GF_HOLY_FIRE		79
#define GF_HELL_FIRE		80
#define GF_DISINTEGRATE		81
#define GF_CHARM		82
#define GF_CONTROL_UNDEAD	83
#define GF_CONTROL_ANIMAL	84
#define GF_PSI			85
#define GF_PSI_DRAIN		86
#define GF_TELEKINESIS		87
#define GF_JAM_DOOR		88
#define GF_DOMINATION		89
#define GF_DISP_GOOD		90
#define GF_IDENTIFY		91
#define GF_RAISE		92
#define GF_STAR_IDENTIFY	93
#define GF_DESTRUCTION		94
#define GF_STUN_CONF		95
#define GF_STUN_DAM		96
#define GF_CONF_DAM		98
#define GF_STAR_CHARM		99
#define GF_IMPLOSION		100
#define GF_LAVA_FLOW		101
#define GF_FEAR			102
#define GF_BETWEEN_GATE		103
#define GF_WINDS_MANA		104
#define GF_DEATH		105
#define GF_CONTROL_DEMON	106
#define GF_RAISE_DEMON		107
#define GF_TRAP_DEMONSOUL	108
#define GF_ATTACK		109
/* Increased it (from 152) to 153 - the_sandman*/
/* Increaing it again by ... 3-- to 156 :-) - the_sandman */
#define MAX_GF			156	/* appearently unused, if 0'ed */
#endif	/* 0 */
/* ------------ end of #include ' "../common/defines-spells.h'. ------------ */



/* $Id$ */
/* File: spells.pkg */

/*
* Purpose: Lua interface defitions for spells.
* To be processed by tolua to generate C source code.
*/

/* added this for consistency in some (unrelated) header-inclusion, it IS a server file, isn't it? */
$#define SERVER

$#include "angband.h"
$#include "lua.h"

typedef char* cptr;
typedef int errr;
typedef unsigned char bool;
typedef unsigned char byte;
typedef signed short s16b;
typedef unsigned short u16b;
typedef signed int s32b;
typedef unsigned int u32b;


/* cave.c */
/* These should not directly be used from LUA, because at least cave_set_feat_live()
assumes that allow_terraforming() has been checked before!
extern void cave_set_feat(worldpos *wpos, int y, int x, int feat);
extern void cave_set_feat_live(worldpos *wpos, int y, int x, int feat);
Instead, for Glyphs we use the following one cleanly: */
// Argh, I need cave_set_feat for arcade stuff. -Moltor
extern void cave_set_feat(worldpos *wpos, int y, int x, int feat);
extern void warding_glyph(int Ind);
#ifdef ARCADE_SERVER
extern int check_feat(worldpos *wpos, int y, int x);
#endif

/* cmd2.c */
extern void do_cmd_fusion(int Ind);

/* generate.c */
extern void place_up_stairs(worldpos *wpos, int y, int x);

#ifdef ARCADE_SERVER
extern void arcade_wipe(worldpos *wpos);
#endif

/* spells1.c */
extern byte spell_color(int type);
//extern void apply_morph(int Ind, int power, char * killer);
extern void take_xp_hit(int Ind, int damage, cptr hit_from, bool mode, bool fatal, bool disturb);
extern void take_sanity_hit(int Ind, int damage, cptr hit_from);
extern s16b poly_r_idx(int r_idx);
//extern bool check_st_anchor(struct worldpos *wpos);
extern bool check_st_anchor(struct worldpos *wpos, int y, int x);
extern bool swap_position(int Ind, int lty, int ltx);
extern bool teleport_away(int m_idx, int dis);
extern void teleport_player(int Ind, int dis, bool ignore_pvp);
extern void teleport_player_to(int Ind, int ny, int nx);
extern void teleport_player_level(int Ind, bool force);
extern bool bypass_invuln;
extern void take_hit(int Ind, int damage, cptr kb_str, int Ind_attacker);
extern void acid_dam(int Ind, int dam, cptr kb_str, int Ind_attacker);
extern void elec_dam(int Ind, int dam, cptr kb_str, int Ind_attacker);
extern void fire_dam(int Ind, int dam, cptr kb_str, int Ind_attacker);
extern void cold_dam(int Ind, int dam, cptr kb_str, int Ind_attacker);
extern bool inc_stat(int Ind, int stat);
extern bool dec_stat(int Ind, int stat, int amount, int mode);
extern bool res_stat(int Ind, int stat);
extern bool apply_disenchant(int Ind, int mode);
extern bool apply_discharge(int Ind, int dam);
extern bool apply_discharge_item(int o_idx, int dam);
extern bool project_hook(int Ind, int typ, int dir, int dam, int flg, char *attacker);
extern bool project(int who, int rad, struct worldpos *wpos, int y, int x, int dam, int typ, int flg, char *attacker);
//extern bool lua_project(int who, int rad, struct worldpos *wpos, int y, int x, int dam, int typ, int flg, char *attacker);
extern int set_all_destroy(object_type *o_ptr);
extern int set_cold_destroy(object_type *o_ptr);
extern int set_impact_destroy(object_type *o_ptr);
extern int set_water_destroy(object_type *o_ptr);
extern int equip_damage(int Ind, int typ);
extern int inven_damage(int Ind, inven_func typ, int perc);
extern int weapon_takes_damage(int Ind, int typ, int slot);
#ifndef NEW_SHIELDS_NO_AC
extern int shield_takes_damage(int Ind, int typ);
#endif
//extern int inven_damage(int Ind, object_type *typ, int perc);
extern bool set_oppose_acid(int Ind, int v);
extern bool set_oppose_elec(int Ind, int v);
extern bool set_oppose_fire(int Ind, int v);
extern bool set_oppose_cold(int Ind, int v);
extern bool set_oppose_pois(int Ind, int v);
extern bool set_stun(int Ind, int v);
extern bool set_cut(int Ind, int v, int attacker);
extern bool set_food(int Ind, int v);
extern bool set_invuln_short(int Ind, int v);
extern bool set_biofeedback(int Ind, int v);
extern bool set_adrenaline(int Ind, int v);
extern bool set_tim_esp(int Ind, int v);
extern bool set_st_anchor(int Ind, int v);
extern bool set_prob_travel(int Ind, int v);
extern bool set_mimic(int Ind, int v, int p);
extern bool set_tim_traps(int Ind, int v);
extern bool set_tim_manashield(int Ind, int v);
extern bool set_invis(int Ind, int v, int p);
extern bool set_fury(int Ind, int v);
extern bool set_tim_meditation(int Ind, int v);
extern bool set_tim_wraith(int Ind, int v);
extern bool set_blind(int Ind, int v);
extern bool set_confused(int Ind, int v);
extern bool set_poisoned(int Ind, int v, int attacker);
extern bool set_afraid(int Ind, int v);
extern bool set_paralyzed(int Ind, int v);
extern bool set_image(int Ind, int v);
extern bool set_fast(int Ind, int v, int p);
extern bool set_slow(int Ind, int v);
extern void wizard_lock(int Ind, int dir);

extern bool set_shield(int Ind, int v, int p, s16b o, s16b d1, s16b d2);
extern bool set_tim_thunder(int Ind, int v, int p1, int p2);
extern bool set_tim_regen(int Ind, int v, int p);
extern bool set_tim_ffall(int Ind, int v);
extern bool set_tim_lev(int Ind, int v);
extern bool set_blessed(int Ind, int v);
extern bool set_res_fear(int Ind, int v);
extern bool set_hero(int Ind, int v);
extern bool set_shero(int Ind, int v);
extern bool set_protevil(int Ind, int v);
extern bool set_zeal(int Ind, int p, int v);
extern bool set_martyr(int Ind, int v);
extern bool set_invuln(int Ind, int v);
extern bool set_tim_invis(int Ind, int v);
extern bool set_tim_infra(int Ind, int v);
extern bool set_mindboost(int Ind, int p, int v);
extern bool set_kinetic_shield(int Ind, int v);
#ifdef ENABLE_OCCULT
extern bool set_savingthrow(int Ind, int v);
extern bool set_spirit_shield(int Ind, int power, int v);
#endif
extern bool identify_fully(int Ind);
extern void self_knowledge(int Ind);
extern bool ident_spell(int Ind);
extern void map_area(int Ind);
extern void mind_map_level(int Ind, int pow);
extern void wiz_lite(int Ind);
extern void wiz_lite_extra(int Ind);
extern void wiz_dark(int Ind);
extern bool detect_creatures_xxx(int Ind, u32b match_flag);
extern bool detect_creatures(int Ind);

/* spells2.c */
extern bool place_foe(int owner_id, struct worldpos *wpos, int y, int x, int r_idx);
extern bool heal_insanity(int Ind, int val);
extern void summon_cyber(int Ind, int s_clone, int clone_summoning);
extern void golem_creation(int Ind, int max);
extern bool hp_player(int Ind, int num);
extern bool hp_player_quiet(int Ind, int num, bool autoeffect);
extern void warding_glyph(int Ind);
extern bool do_dec_stat(int Ind, int stat, int mode);
extern bool do_res_stat(int Ind, int stat);
extern bool do_inc_stat(int Ind, int stat);
extern void identify_pack(int Ind);
extern void message_pain(int Ind, int m_idx, int dam);
extern bool remove_curse(int Ind);
extern bool remove_all_curse(int Ind);
extern bool restore_level(int Ind);
extern void self_knowledge(int Ind);
extern bool lose_all_info(int Ind);
extern bool detect_treasure(int Ind, int rad);
extern bool detect_magic(int Ind, int rad);
extern bool detect_invisible(int Ind);
extern bool detect_evil(int Ind);
extern bool detect_noise(int Ind);
extern bool detection(int Ind, int rad);
extern bool detect_object(int Ind, int rad);
extern bool detect_trap(int Ind, int rad);
extern bool detect_sdoor(int Ind, int rad);
extern void stair_creation(int Ind);
extern bool enchant(int Ind, object_type *o_ptr, int n, int eflag);
extern bool enchant_spell(int Ind, int num_hit, int num_dam, int num_ac, int flags);
extern bool enchant_spell_aux(int Ind, int item, int num_hit, int num_dam, int num_ac, int flags);
extern bool ident_spell(int Ind);
extern bool ident_spell_aux(int Ind, int item);
extern bool identify_fully(int Ind);
extern bool identify_fully_item(int Ind, int item);
extern bool recharge(int Ind, int num);
extern bool recharge_aux(int Ind, int item, int num);
extern bool speed_monsters(int Ind);
extern bool slow_monsters(int Ind, int pow);
extern bool sleep_monsters(int Ind, int pow);
extern bool fear_monsters(int Ind, int pow);
extern bool stun_monsters(int Ind, int pow);
extern void aggravate_monsters(int Ind, int who);
extern void wake_minions(int Ind, int who);
extern bool genocide_aux(int Ind, worldpos *wpos, char typ);
extern bool genocide(int Ind);
extern bool obliteration(int who);
extern bool probing(int Ind);
extern bool project_los(int Ind, int typ, int dam, char *attacker);
extern bool away_evil(int Ind, int dist);
extern bool dispel_evil(int Ind, int dam);
extern bool dispel_undead(int Ind, int dam);
extern bool dispel_demons(int Ind, int dam);
extern bool dispel_monsters(int Ind, int dam);
extern bool turn_undead(int Ind);
extern void destroy_area(struct worldpos *wpos, int y1, int x1, int r, bool full, byte feat, int stun);
extern void earthquake(struct worldpos *wpos, int cy, int cx, int r);
extern void wipe_spell(struct worldpos *wpos, int cy, int cx, int r);
extern void lite_room(int Ind, struct worldpos *wpos, int y1, int x1);
extern void unlite_room(int Ind, struct worldpos *wpos, int y1, int x1);
extern bool lite_area(int Ind, int dam, int rad);
extern bool unlite_area(int Ind, int dam, int rad);
extern bool fire_ball(int Ind, int typ, int dir, int dam, int rad, char *attacker);
extern bool fire_wall(int Ind, int typ, int dir, int dam, int time, int interval, char *attacker);
extern bool fire_cloud(int Ind, int typ, int dir, int dam, int rad, int time, int interval, char *attacker);
extern bool fire_wave(int Ind, int typ, int dir, int dam, int rad, int time, int interval, s32b eff, char *attacker);
extern bool fire_bolt(int Ind, int typ, int dir, int dam, char *attacker);
extern bool fire_beam(int Ind, int typ, int dir, int dam, char *attacker);
extern bool fire_bolt_or_beam(int Ind, int prob, int typ, int dir, int dam, char *attacker);
extern bool fire_grid_bolt(int Ind, int typ, int dir, int dam, char *attacker);
extern bool fire_grid_beam(int Ind, int typ, int dir, int dam, char *attacker);
extern bool lite_line(int Ind, int dir, int dam, bool starlight);
extern bool drain_life(int Ind, int dir, int dam);
extern bool wall_to_mud(int Ind, int dir);
extern bool destroy_trap_door(int Ind, int dir);
extern bool disarm_trap_door(int Ind, int dir);
extern bool heal_monster(int Ind, int dir);
extern bool speed_monster(int Ind, int dir);
extern bool slow_monster(int Ind, int dir, int pow);
extern bool sleep_monster(int Ind, int dir, int pow);
extern bool confuse_monster(int Ind, int dir, int pow);
extern bool fear_monster(int Ind, int dir, int pow);
extern bool poly_monster(int Ind, int dir);
extern bool clone_monster(int Ind, int dir);
extern bool teleport_monster(int Ind, int dir);
extern bool cure_light_wounds_proj(int Ind, int dir);
extern bool cure_serious_wounds_proj(int Ind, int dir);
extern bool cure_critical_wounds_proj(int Ind, int dir);
extern void grow_trees(int Ind, int rad);
extern bool heal_other_proj(int Ind, int dir);
extern bool door_creation(int Ind);
extern bool trap_creation(int Ind, int mod, int rad);
extern bool destroy_doors_touch(int Ind, int rad);
extern bool destroy_traps_touch(int Ind, int rad);
extern bool destroy_traps_doors_touch(int Ind, int rad);
extern bool sleep_monsters_touch(int Ind);
extern bool create_artifact(int Ind, bool nolife);
extern bool create_artifact_aux(int Ind, int item);
extern bool curse_spell(int Ind);
extern bool curse_spell_aux(int Ind, int item);
extern void house_creation(int Ind, bool floor, bool jail);
extern bool do_vermin_control(int Ind);
extern void do_autokinesis_to(int Ind, int dis);
extern bool do_mstopcharm(int Ind);

/* traps.c */
extern void place_trap_specific(struct worldpos *wpos, int y, int x, int mod, int found);

/* runecraft.c */
extern bool warding_rune(int Ind, byte typ, byte mod, byte lvl);
extern bool warding_rune_break(int m_idx);

/* Druidry */
extern bool create_garden(int Ind, int level);
extern bool do_banish_animals(int Ind, int chance);
extern bool do_xtra_stats(int Ind, int s, int p, int v);
extern bool do_focus(int Ind, int p, int v);

#ifdef ENABLE_MAIA
extern void divine_vengeance(int Ind, int power);
extern void divine_gateway(int Ind);
extern bool do_divine_xtra_res_time(int Ind, int p);
extern bool do_divine_hp(int Ind, int p, int v);
extern bool do_divine_crit(int Ind, int p, int v);
#endif

extern void set_recall_depth(player_type * p_ptr, object_type * o_ptr);
extern bool set_recall_timer(int Ind, int v);
extern bool set_recall(int Ind, int v, object_type * o_ptr);

#ifdef ENABLE_OCCULT /* Occult */
extern bool do_shadow_gate(int Ind, int range);
#endif

/* xtra2.c */
extern bool set_brand(int Ind, int v, int t, int p);
extern bool set_bow_brand(int Ind, int v, int t, int p);

/*
* The spell function must provide the desc
*/
struct spell_type
{
cptr name;                      /* Name */
byte skill_level;               /* Required level (to learn) */
byte mana;			/* Required mana at lvl 1 */
byte mana_max;			/* Required mana at max lvl */
byte fail;			/* Minimum chance of failure */
s16b level;                     /* Spell level(0 = not learnt) */
byte spell_power;		/* affected by spell-power skill? */
};

struct school_type
{
cptr name;                      /* Name */
s16b skill;                     /* Skill used for that school */
};

//duplicate declarations (see above):
//extern void teleport_player(int Ind, int dis, bool ignore_pvp);
//extern void teleport_player_to(int Ind, int ny, int nx);
//extern void teleport_player_level(int Ind, bool force);

/* This could have some good uses */
extern s16b project_interval;
extern s16b project_time;
extern s32b project_time_effect;
/* extern bool project(int who, int rad, struct worldpos *wpos, int y, int x, int dam, int typ, int flg, char *attacker); */

/* lua_bind.c */
extern s16b new_school(int i, cptr name, s16b skill);
extern s16b new_spell(int i, cptr name);
extern spell_type *grab_spell_type @ spell(s16b num);
extern school_type *grab_school_type @ school(s16b num);
extern s32b lua_get_level(int Ind, s32b s, s32b lvl, s32b max, s32b min, s32b bonus);
extern s32b lua_spell_chance(int Ind, s32b chance, int level, int skill_level, int mana, int cur_mana, int stat);
/* extern u32b get_school_spell(cptr do_what); */
extern void lua_s_print(cptr logstr);
extern void lua_add_anote(char *anote);
extern void lua_del_anotes();
extern void lua_broadcast_motd();
extern void lua_count_houses(int Ind);
extern void lua_recalc_char(int Ind);
extern void lua_examine_item(int Ind, int Ind_target, int item);
extern void lua_determine_level_req(int Ind, int item);
extern void lua_strip_true_arts_from_absent_players(void);
extern void lua_strip_true_arts_from_present_player(int Ind, int mode);
extern void lua_strip_true_arts_from_floors(void);
extern void lua_check_player_for_true_arts(int Ind);
extern int lua_get_mon_lev(int r_idx);
extern char *lua_get_mon_name(int r_idx);
extern void lua_towns_treset(void);
extern long lua_player_exp(int level, int expfact);
extern void lua_fix_spellbooks(int spell, int mod);
extern void lua_fix_spellbooks_hackfix(int spell, int mod);
extern void lua_fix_spellbooks2(int sold, int snew, int swap);
extern void lua_arts_fix(int Ind);
extern char* lua_get_last_chat_line();
extern char* lua_get_last_chat_owner();
extern void lua_get_pgestat(int Ind, int n);
extern void lua_start_global_event(int Ind, int evtype, char *parm);
extern void lua_apply_item_changes(int Ind, int changes);
extern void lua_set_floor_flags(int Ind, u32b flags);
extern s32b lua_get_skill_mod(int Ind, int i);
extern s32b lua_get_skill_value(int Ind, int i);
extern void lua_fix_equip_slots(int Ind);
extern void lua_fix_skill_chart(int Ind);
extern void lua_takeoff_costumes(int Ind);
extern bool lua_is_unique(int r_idx);
extern bool lua_mimic_eligible(int Ind, int r_idx);
extern bool lua_mimic_humanoid(int r_idx);
extern void lua_forget_flavours(int Ind);
extern void lua_forget_map(int Ind);
extern void lua_forget_parties(void);
extern void lua_forget_guilds(void);

/* wild.c */
extern void wild_flags(int Ind, u32b flags);

/* lua-dependant 'constants' */
extern int __lua_HHEALING;
extern int __lua_HBLESSING;
extern int __lua_MSCARE;
extern int __lua_M_FIRST;
extern int __lua_M_LAST;
extern int __lua_OFEAR;

extern bool sauron_weakened;
extern bool sauron_weakened_iddc;
