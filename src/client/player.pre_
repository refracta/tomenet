/* register server type for #if..#else..#endif structures with 'preproc' */
#parse "../common/defines-local.h"
#parse "../common/defines-features.h"

/* specific includes for player.pre file */

/* ---------------- #include '../common/defines-player.h' ---------------- */
/* $Id$ */
/* File: defines-player.h */

/* Purpose: global constants and macro definitions for player.pre lua file */

#define PW_PLAYER	8

#define PY_FOOD_MAX	15000	/* Food value (Bloated) */
#define PY_FOOD_FULL	10000	/* Food value (Normal) */

/*
* Maximum number of "normal" pack slots, and the index of the "overflow"
* slot, which can hold an item, but only temporarily, since it causes the
* pack to "overflow", dropping the "last" item onto the ground.  Since this
* value is used as an actual slot, it must be less than "INVEN_WIELD" (below).
* Note that "INVEN_PACK" is probably hard-coded by its use in savefiles, and
* by the fact that the screen can only show 23 items plus a one-line prompt.
*/
#define INVEN_PACK	23
/*
* Indexes used for various "equipment" slots (hard-coded by savefiles, etc).
*/
#define INVEN_WIELD	24
/*
* Total number of inventory slots (hard-coded).
*/
#define INVEN_TOTAL	38	/* since they start at 0, max slot index is INVEN_TOTAL - 1 (!) */


/*
* Indexes of the various "stats" (hard-coded by savefiles, etc).
*/
#define A_STR	0
#define A_INT	1
#define A_WIS	2
#define A_DEX	3
#define A_CON	4
#define A_CHR	5


/*
* Player race constants (hard-coded by save-files, arrays, etc)
*/
#define RACE_HUMAN	0
#define RACE_HALF_ELF	1
#define RACE_ELF	2
#define RACE_HOBBIT	3
#define RACE_GNOME	4
#define RACE_DWARF	5
#define RACE_HALF_ORC	6
#define RACE_HALF_TROLL	7
#define RACE_DUNADAN	8
#define RACE_HIGH_ELF	9
#define RACE_YEEK	10
#define RACE_GOBLIN	11
#define RACE_ENT	12
#define RACE_DRACONIAN	13
#ifdef ENABLE_KOBOLD
#define RACE_KOBOLD	14
#define RACE_DARK_ELF	15
#define RACE_VAMPIRE	16
//#ifdef ENABLE_MAIA
#define RACE_MAIA	17
//#endif
#else
#define RACE_DARK_ELF	14
#define RACE_VAMPIRE	15
//#ifdef ENABLE_MAIA
#define RACE_MAIA	16
//#endif
#endif
/* (or simply replace all those defines with p_info.txt) */

/*
* Player class constants (hard-coded by save-files, arrays, etc)
*/
#define CLASS_WARRIOR		0
#define CLASS_MAGE		1
#define CLASS_PRIEST		2
#define CLASS_ROGUE		3
#define CLASS_MIMIC		4
#define CLASS_ARCHER		5
#define CLASS_PALADIN		6
#define CLASS_RANGER		7
#define CLASS_ADVENTURER	8
//#define CLASS_BARD		9
#define CLASS_DRUID		9
#define CLASS_SHAMAN		10
#define CLASS_RUNEMASTER	11
#define CLASS_MINDCRAFTER	12
#ifdef ENABLE_DEATHKNIGHT
#define CLASS_DEATHKNIGHT	13
#endif
#ifdef ENABLE_HELLKNIGHT
#define CLASS_HELLKNIGHT	14
#endif
#ifdef ENABLE_CPRIEST
#define CLASS_CPRIEST		15
#endif


/* for spell-casting */
#define TRAIT_ENLIGHTENED	14	/* Maiar */
#define TRAIT_CORRUPTED		15


/*
* Skills
*/
#define SKILL_MAX               50000           /* Maximun skill value */
#define SKILL_STEP              1000            /* 1 skill point */

#define SKILL_EXCLUSIVE         9999            /* Flag to tell exclusive skills */

#define SKILL_COMBAT            1
#define SKILL_MASTERY           2
#define SKILL_SWORD             3
#define SKILL_CRITS             4
#define SKILL_POLEARM           5
#define SKILL_BLUNT		6
#define SKILL_ARCHERY           7
#define SKILL_SLING             8
#define SKILL_BOW               9
#define SKILL_XBOW              10
#define SKILL_BACKSTAB          11
#define SKILL_MAGIC             12
//#define SKILL_CASTSPEED         13
#define SKILL_SHOOT_TILL_KILL	13
#define SKILL_SORCERY           14
#define SKILL_MAGERY            15
#define SKILL_MIMIC             16
#define SKILL_DEVICE            17
#define SKILL_SHADOW            18
#define SKILL_PRAY              19
#define SKILL_SPELLLENGTH       20
#define SKILL_SNEAKINESS        21
#define SKILL_DISARM            22
#define SKILL_STEALTH           23
#define SKILL_STEALING          24
#define SKILL_NECROMANCY        25
#define SKILL_ANTIMAGIC         26
/* #define SKILL_AURA_POWER       27 */
#define SKILL_TRAUMATURGY       27
#define SKILL_AURA_FEAR         28
#define SKILL_AURA_SHIVER       29
#define SKILL_AURA_DEATH        30
#define SKILL_HUNTING		31
#define SKILL_TECHNIQUE		32
#define SKILL_MISC              33
#define SKILL_AGILITY		34
#define SKILL_CALMNESS		35
#define SKILL_SWIM		36
#define SKILL_MARTIAL_ARTS	37
#define SKILL_RICOCHET		38
#define SKILL_BOOMERANG		39
#define SKILL_TRAINING		40
#define SKILL_INTERCEPT		41
#define SKILL_DODGE		42
#define SKILL_HEALTH		43
#define SKILL_DIG		44
#define SKILL_SPELLRAD		45
#define SKILL_TRAPPING          46
#define SKILL_AXE		47	/* hrm, bad order */

/* School skills */
#define SKILL_CONVEYANCE        48
#define SKILL_SPELL		49
#define SKILL_MANA              50
#define SKILL_FIRE              51
#define SKILL_AIR               52
#define SKILL_WATER             53
#define SKILL_NATURE            54
#define SKILL_EARTH             55
#define SKILL_DIVINATION        56
#define SKILL_TEMPORAL          57
#define SKILL_META              58
#define SKILL_MIND              59
#define SKILL_UDUN              60

/* for future use, if we ever can get these balanced in a sensible manner (seems unlikely without heavy changes to all other game elements oO) */
#define SKILL_SCHOOL_CRAFTING	61	/* dummy skill for clustering */
#define SKILL_WEAPONSMITHING	62
#define SKILL_ARMOURSMITHING	63
#define SKILL_FLETCHING		64
#define SKILL_JEWELCRAFT	65
#define SKILL_TOOLCRAFT		66
#define SKILL_TAILORING		67
#define SKILL_ALCHEMY		68
#define SKILL_ENCHANTING	69

#define SKILL_HOFFENSE          70
#define SKILL_HDEFENSE          71
#define SKILL_HCURING           72
#define SKILL_HSUPPORT          73

#define SKILL_DRUID_ARCANE	74
#define SKILL_DRUID_PHYSICAL	75

#define SKILL_ASTRAL		77

#define SKILL_DUAL		78 /* dual-wield for rogues */
#define SKILL_STANCE		79 /* combat stances for warriors */

#define SKILL_PPOWER		80 /* the new mindcrafter skills */
#define SKILL_TCONTACT		81 /* the new mindcrafter skills */
#define SKILL_MINTRUSION	82 /* the new mindcrafter skills */

/* Dummy skills - just to make the mass of schools appear more ordered - C. Blue */
#define SKILL_SCHOOL_MAGIC	83
#define SKILL_SCHOOL_PRAYING	84
#define SKILL_SCHOOL_DRUIDISM	85
#define SKILL_SCHOOL_MINDCRAFT	86
//#ifdef ENABLE_OCCULT /* Occult */
#define SKILL_OSHADOW		87
#define SKILL_OSPIRIT		88
/* and the dummy skill for sorting: */
#define SKILL_SCHOOL_OCCULT	89
//#ifdef ENABLE_OHERETICISM
#define SKILL_OHERETICISM	94
//#endif
//#endif

/* additional ones */
#define SKILL_CLIMB		90
#define SKILL_LEVITATE		91
#define SKILL_FREEACT		92
#define SKILL_RESCONF		93
//94 defined above
#if 0	/* skills to come	- Jir - */
#define SKILL_INNATE_POWER	/* in mimicry tree */
#define SKILL_EGO_POWER
#endif	/* 0 */

#define SKILL_SCHOOL_RUNECRAFT	95
#define SKILL_R_LITE		96
#define SKILL_R_DARK		97
#define SKILL_R_NEXU		98
#define SKILL_R_NETH		99
#define SKILL_R_CHAO		100
#define SKILL_R_MANA		101

/* for future use, so no client update will be required */
#define SKILL_SOULFEASTING	102	/* could switch with SKILL_NECROMANCY if ever needed */
#define SKILL_SUMMONING		103
#define SKILL_TAMING		104

#define SKILL_BLOOD_MAGIC	109 /* dummy */

/* For Draconians */
#define SKILL_BREATH		110

#define MAX_SKILLS              128
/* ------------ end of #include ' "../common/defines-player.h'. ------------ */



/* $Id$ */
$#include "angband.h"

typedef char* cptr;
typedef int errr;
typedef unsigned char bool;
typedef unsigned char byte;
typedef signed short s16b;
typedef unsigned short u16b;
typedef signed int s32b;
typedef unsigned int u32b;

struct worldpos{
s16b wx;	/* west to east */
s16b wy;	/* south to north */
s16b wz;	/* deep to sky */
};

struct object_type
{
s32b owner;                     /* Player that found it */
s16b level;                     /* Level req */

s16b k_idx;			/* Kind index (zero if "dead") */

byte iy;			/* Y-position on map, or zero */
byte ix;			/* X-position on map, or zero */

struct worldpos wpos;

byte tval;			/* Item type (from kind) */
byte sval;			/* Item sub-type (from kind) */

s32b bpval;			/* Base item extra-parameter */
s32b pval;			/* Extra enchantment item extra-parameter */

byte discount;			/* Discount (if any) */

byte number;			/* Number of items */

s16b weight;			/* Item weight */

byte name1;			/* Artifact type, if any */
byte name2;			/* Ego-Item type, if any */
s32b name3;			/* Randart seed, if any */

byte attr;

byte xtra1;			/* Extra info type */
byte xtra2;			/* Extra info index */
byte xtra3;			/* Extra info type */
byte xtra4;			/* Extra info type */
byte xtra5;			/* Extra info index */
byte xtra6;			/* Extra info type */
byte xtra7;			/* Extra info index */
byte xtra8;			/* Extra info type */
byte xtra9;			/* Extra info index */

s16b to_h;			/* Plusses to hit */
s16b to_d;			/* Plusses to damage */
s16b to_a;			/* Plusses to AC */

s16b ac;			/* Normal AC */

byte dd;
byte ds;			/* Damage dice/sides */

s16b timeout;			/* Timeout Counter */

byte ident;			/* Special flags  */

/*byte marked;	*/		/* Object is marked */

u16b note;			/* Inscription index */

char uses_dir;			/* Uses a direction or not? (for rods) */
};

/*
* Skills of each player
*/
struct skill_player
{
s32b value;                             /* Actual value */
u16b mod;                               /* Modifier(1 skill point = modifier skill) */
bool dev;                               /* Is the branch developped ? */
char flags1;
};

struct version_type {   /* Extended version structure */
int major;
int minor;
int patch;
int extra;
int branch;
int build;

int os;
};

struct player_type
{
int conn;			/* Connection number */
char name[MAX_CHARS];		/* Nickname */
char basename[MAX_CHARS];
char realname[MAX_CHARS];	/* Userid */
char hostname[MAX_CHARS];	/* His hostname */
char addr[MAX_CHARS];		/* His IP address */
//	unsigned int version;		/* His version */
version_type version;

s32b id;		/* Unique ID to each player */
u32b dna;		/* DNA - psuedo unique to each player life */

hostile_type *hostile;	/* List of players we wish to attack */

char savefile[1024];	/* Name of the savefile */

bool alive;		/* Are we alive */
bool death;		/* Have we died */
s16b ghost;		/* Are we a ghost */
s16b fruit_bat;		/* Are we a fruit bat */
byte lives;		/* number of times we have ressurected */

byte prace;			/* Race index */
byte pclass;			/* Class index */
byte ptrait;			/* Trait index */
byte male;			/* Sex of character */
byte oops;			/* Unused */

skill_player s_info[MAX_SKILLS]; /* Player skills */
s16b skill_points;      /* number of skills assignable */

byte hitdie;		/* Hit dice (sides) */
s16b expfact;		/* Experience factor */

s32b au;			/* Current Gold */

s32b max_exp;		/* Max experience */
s32b exp;			/* Cur experience */
u16b exp_frac;		/* Cur exp frac (times 2^16) */

s16b lev;			/* Level */

s16b mhp;			/* Max hit pts */
s16b chp;			/* Cur hit pts */
u16b chp_frac;		/* Cur hit frac (times 2^16) */

s16b player_hp[PY_MAX_LEVEL];

s16b msp;			/* Max mana pts */
s16b csp;			/* Cur mana pts */
u16b csp_frac;		/* Cur mana frac (times 2^16) */

object_type inventory[INVEN_TOTAL];	/* Player's inventory */

s32b total_weight;	/* Total weight being carried */

s16b inven_cnt;		/* Number of items in inventory */
s16b equip_cnt;		/* Number of items in equipment */

s16b max_plv;		/* Max Player Level */
s16b max_dlv;		/* Max level explored */
worldpos recall_pos;	/* which depth to recall to */

s16b stat_max[6];	/* Current "maximal" stat values */
s16b stat_cur[6];	/* Current "natural" stat values */

unsigned char wild_map[MAX_WILD_8]; /* the wilderness we have explored */

s16b py;		/* Player location in dungeon */
s16b px;
struct worldpos wpos;

s16b cur_hgt;		/* Height and width of their dungeon level */
s16b cur_wid;

bool new_level_flag;	/* Has this player changed depth? */
byte new_level_method;	/* Climb up stairs, down, or teleport level? */

byte party;		/* The party he belongs to (or 0 if neutral) */
byte guild;		/* The guild he belongs to (or 0 if neutral) */

s16b target_who;
s16b target_col;	/* What position is targetted */
s16b target_row;

s16b health_who;	/* Who's shown on the health bar */

s16b view_n;		/* Array of grids viewable to player */
byte view_y[VIEW_MAX];
byte view_x[VIEW_MAX];

s16b lite_n;		/* Array of grids lit by player lite */
byte lite_y[LITE_MAX];
byte lite_x[LITE_MAX];

s16b temp_n;		/* Array of grids used for various things */
byte temp_y[TEMP_MAX];
byte temp_x[TEMP_MAX];

s16b target_n;		/* Array of grids used for targetting/looking */
byte target_y[TEMP_MAX];
byte target_x[TEMP_MAX];
s16b target_idx[TEMP_MAX];

/*	cptr info[128];		Temp storage of *ID* and Self Knowledge info */
char infofile[1024];		/* Temp storage of *ID* and Self Knowledge info */
byte special_file_type;	/* Is he using *ID* or Self Knowledge? */

bool obj_aware[MAX_K_IDX]; /* Is the player aware of this obj type? */
bool obj_tried[MAX_K_IDX]; /* Has the player tried this obj type? */
bool trap_ident[MAX_T_IDX];       /* do we know the name */

byte d_attr[MAX_K_IDX];
char d_char[MAX_K_IDX];
byte f_attr[MAX_F_IDX];
char f_char[MAX_F_IDX];
byte k_attr[MAX_K_IDX];
char k_char[MAX_K_IDX];
byte r_attr[MAX_R_IDX];
char r_char[MAX_R_IDX];

bool carry_query_flag;
bool use_old_target;
bool always_pickup;
bool stack_force_notes;
bool stack_force_costs;
bool find_ignore_stairs;
bool find_ignore_doors;
bool find_cut;
bool find_examine;
bool disturb_move;
bool disturb_near;
bool disturb_panel;
bool disturb_state;
bool disturb_minor;
bool disturb_other;
bool stack_allow_items;
bool stack_allow_wands;
bool view_perma_grids;
bool view_torch_grids;
bool view_reduce_lite;
bool view_reduce_view;
bool view_lamp_walls;
bool view_lamp_floor;
bool view_shade_floor;
bool view_shade_walls;
bool wall_lighting;
bool floor_lighting;

/* TomeNET additions -- consider using macro or bitfield */
bool easy_open;
bool easy_disarm;
bool easy_tunnel;
//	bool auto_destroy;
bool clear_inscr;
bool auto_inscribe;
bool taciturn_messages;
bool last_words;
/* bool speak_unique; */

s16b max_panel_rows;
s16b max_panel_cols;
s16b panel_row;
s16b panel_col;
s16b panel_row_min;
s16b panel_row_max;
s16b panel_col_min;
s16b panel_col_max;
s16b panel_col_prt;	/* What panel this guy's on */
s16b panel_row_prt;
s16b panel_row_old;
s16b panel_col_old;

char died_from[80];	/* What off-ed him */
char died_from_list[80]; /* what goes on the high score list */
s16b died_from_depth;	/* what depth we died on */

u16b total_winner;	/* Is this guy the winner */
struct worldpos own1;
struct worldpos own2;
u16b retire_timer;	/* The number of minutes this guy can play until
he will be forcibly retired.
*/

u16b noscore;		/* Has he cheated in some way (hopefully not) */
s16b command_rep;	/* Command repetition */

byte last_dir;		/* Last direction moved (used for swapping places) */

s16b running;		/* Are we running */
byte find_current;	/* These are used for the running code */
byte find_prevdir;
bool find_openarea;
bool find_breakright;
bool find_breakleft;

bool resting;		/* Are we resting? */

s16b energy_use;	/* How much energy has been used */

int look_index;		/* Used for looking or targeting */

s32b current_char;
s16b current_spell;	/* Spell being cast */
s16b current_mind;	/* Power being use */
s16b current_rod;	/* Rod being zapped */
s16b current_activation;/* Artifact (or dragon mail) being activated */
s16b current_enchant_h; /* Current enchantments */
s16b current_enchant_d;
s16b current_enchant_a;
s16b current_identify;	/* Are we identifying something? */
s16b current_star_identify;
s16b current_recharge;
s16b current_artifact;
object_type *current_telekinesis;
s16b current_curse;

s16b current_selling;
s16b current_sell_amt;
int current_sell_price;

int store_num;		/* What store this guy is in */

s16b fast;			/* Timed -- Fast */
s16b slow;			/* Timed -- Slow */
s16b blind;			/* Timed -- Blindness */
s16b paralyzed;		/* Timed -- Paralysis */
s16b confused;		/* Timed -- Confusion */
s16b afraid;		/* Timed -- Fear */
s16b image;			/* Timed -- Hallucination */
s16b poisoned;		/* Timed -- Poisoned */
s16b cut;			/* Timed -- Cut */
s16b stun;			/* Timed -- Stun */

s16b protevil;		/* Timed -- Protection */
s16b zeal;
s16b zeal_power;
s16b martyr;
s16b martyr_timeout;
s16b invuln;		/* Timed -- Invulnerable */
s16b hero;			/* Timed -- Heroism */
s16b shero;			/* Timed -- Super Heroism */
s16b fury;			/* Timed -- Furry */
s16b shield;		/* Timed -- Shield Spell */
s16b blessed;		/* Timed -- Blessed */
s16b tim_invis;		/* Timed -- See Invisible */
s16b tim_infra;		/* Timed -- Infra Vision */
s16b tim_wraith;	/* Timed -- Wraithform */
bool wraith_in_wall;
s16b tim_meditation;	/* Timed -- Meditation */
s16b tim_invisibility;		/* Timed -- Invisibility */
s16b tim_invis_power;	/* Timed -- Invisibility Power */
s16b tim_traps; 	/* Timed -- Avoid traps */
s16b tim_manashield;    /* Timed -- Mana Shield */
s16b tim_mimic; 	/* Timed -- Mimicry */
s16b tim_mimic_what; 	/* Timed -- Mimicry */
s16b bow_brand; 	/* Timed -- Bow Branding */
byte bow_brand_t; 	/* Timed -- Bow Branding */
s16b bow_brand_d; 	/* Timed -- Bow Branding */
s16b prob_travel;       /* Timed -- Probability travel */
s16b st_anchor;         /* Timed -- Space/Time Anchor */
s16b tim_esp;           /* Timed -- ESP */
s16b adrenaline;
s16b biofeedback;

s16b auto_tunnel;
s16b body_monster;

s16b oppose_acid;	/* Timed -- oppose acid */
s16b oppose_elec;	/* Timed -- oppose lightning */
s16b oppose_fire;	/* Timed -- oppose heat */
s16b oppose_cold;	/* Timed -- oppose cold */
s16b oppose_pois;	/* Timed -- oppose poison */

s16b word_recall;	/* Word of recall counter */

s16b energy;		/* Current energy */

s16b food;			/* Current nutrition */

byte confusing;		/* Glowing hands */
byte stunning;		/* Heavy hands */
byte searching;		/* Currently searching */

s16b old_lite;		/* Old radius of lite (if any) */
s16b old_view;		/* Old radius of view (if any) */

s16b old_food_aux;	/* Old value of food */


bool cumber_armor;	/* Mana draining armor */
bool cumber_glove;	/* Mana draining gloves */
bool heavy_wield;	/* Heavy weapon */
bool heavy_shield;	/* Heavy weapon */
bool heavy_shoot;	/* Heavy shooter */
bool icky_wield;	/* Icky weapon */
bool awkward_wield;	/* Icky weapon */

s16b cur_lite;		/* Radius of lite (if any) */


u32b notice;		/* Special Updates (bit flags) */
u32b update;		/* Pending Updates (bit flags) */
u32b redraw;		/* Normal Redraws (bit flags) */
u32b redraw2;		/* more Normal Redraws (bit flags) */
u32b window;		/* Window Redraws (bit flags) */

s16b stat_use[6];	/* Current modified stats */
s16b stat_top[6];	/* Maximal modified stats */

s16b stat_add[6];	/* Modifiers to stat values */
s16b stat_ind[6];	/* Indexes into stat tables */

bool immune_acid;	/* Immunity to acid */
bool immune_elec;	/* Immunity to lightning */
bool immune_fire;	/* Immunity to fire */
bool immune_cold;	/* Immunity to cold */

s16b reduc_fire;        /* Fire damage reduction */
s16b reduc_elec;        /* elec damage reduction */
s16b reduc_acid;        /* acid damage reduction */
s16b reduc_cold;        /* cold damage reduction */

bool resist_acid;	/* Resist acid */
bool resist_elec;	/* Resist lightning */
bool resist_fire;	/* Resist fire */
bool resist_cold;	/* Resist cold */
bool resist_pois;	/* Resist poison */

bool resist_conf;	/* Resist confusion */
bool resist_sound;	/* Resist sound */
bool resist_lite;	/* Resist light */
bool resist_dark;	/* Resist darkness */
bool resist_chaos;	/* Resist chaos */
bool resist_disen;	/* Resist disenchant */
bool resist_shard;	/* Resist shards */
bool resist_nexus;	/* Resist nexus */
bool resist_blind;	/* Resist blindness */
bool resist_neth;	/* Resist nether */
bool resist_fear;	/* Resist fear */

bool sustain_str;	/* Keep strength */
bool sustain_int;	/* Keep intelligence */
bool sustain_wis;	/* Keep wisdom */
bool sustain_dex;	/* Keep dexterity */
bool sustain_con;	/* Keep constitution */
bool sustain_chr;	/* Keep charisma */

bool aggravate;		/* Aggravate monsters */
bool teleport;		/* Random teleporting */

byte drain_exp;		/* Experience draining */

bool feather_fall;	/* No damage falling */
bool lite;		/* Permanent light */
bool free_act;		/* Never paralyzed */
bool see_inv;		/* Can see invisible */
bool resist_time;	/* Resist Time */
bool resist_mana;	/* Resist mana / magic */
bool immune_poison;	/* Poison Immunity */
bool immune_water;	/* Water Immunity, would also let you breathe under water */
bool resist_water;	/* Resist Water */
bool regenerate;	/* Regenerate hit pts */
bool hold_life;		/* Resist life draining */
bool telepathy;		/* Telepathy */
bool slow_digest;	/* Slower digestion */
bool bless_blade;	/* Blessed blade */
bool xtra_might;	/* Extra might bow */
bool impact;		/* Earthquake blows */
bool auto_id; /* Pickup = Id */

s16b invis;		/* Invisibility */

s16b dis_to_h;		/* Known bonus to hit */
s16b dis_to_d;		/* Known bonus to dam */
s16b dis_to_a;		/* Known bonus to ac */

s16b dis_ac;		/* Known base ac */

s16b to_h;			/* Bonus to hit */
s16b to_d;			/* Bonus to dam */
s16b to_a;			/* Bonus to ac */

s16b ac;			/* Base ac */

s16b see_infra;		/* Infravision range */

s16b skill_dis;		/* Skill: Disarming */
s16b skill_dev;		/* Skill: Magic Devices */
s16b skill_sav;		/* Skill: Saving throw */
s16b skill_stl;		/* Skill: Stealth factor */
s16b skill_srh;		/* Skill: Searching ability */
s16b skill_fos;		/* Skill: Searching frequency */
s16b skill_thn;		/* Skill: To hit (normal) */
s16b skill_thb;		/* Skill: To hit (shooting) */
s16b skill_tht;		/* Skill: To hit (throwing) */
s16b skill_dig;		/* Skill: Digging */

s16b num_blow;		/* Number of blows */
s16b num_fire;		/* Number of shots */
s16b num_spell;		/* Number of spells */

byte tval_xtra;		/* Correct xtra tval */

byte tval_ammo;		/* Correct ammo tval */

s16b pspeed;		/* Current speed */

s16b r_killed[MAX_R_IDX];	/* Monsters killed */
s16b r_mimicry[MAX_R_IDX];	/* Monster kill count for mimicry */

s32b innate_spells[3]; /* Monster spells */
bool body_changed;

bool anti_magic;	/* Can the player resist magic */

player_list_type *blood_bond; /* Norc is now happy :) */

byte mode; /* Difficulty MODE */

s32b esp_link; /* Mental link */
byte esp_link_type;
u16b esp_link_flags;
u16b esp_link_end; /* Time before actual end */

/* additions */
bool black_breath;      /* The Tolkien's Black Breath */

s16b msane;                   /* Max sanity */
s16b csane;                   /* Cur sanity */
u16b csane_frac;              /* Cur sanity frac */

int limit_spells; /* LIMIT_SPELLS server-side */
};

extern int hack_force_spell_level; /* LIMIT_SPELLS client-side */

extern player_type Players[2] @ Players_real;


/*
* Objs
*/
extern bool get_item_aux(int *cp, cptr pmt, bool equip, bool inven, bool floor);
extern bool c_get_item(int *cp, cptr fmt, int mode);
extern void lua_set_item_tester(int tval, char *fct);


extern int get_inven_sval(int Ind, int inven_slot);
extern int get_inven_xtra(int Ind, int inven_slot, int n);

extern int get_inven_pval(int Ind, int inven_slot);
